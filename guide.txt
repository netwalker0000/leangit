

分页器操作
q ：退出分页器
h ：显示分页器帮助
空格/b : 下翻一页/上翻一页
d/u ：下翻半页/上翻半页
j/k : 上翻一行/下翻一行
如果行太长被截断，可以用左箭头和右箭头使窗口内容左右滚动
输入/pattern : 向下寻找和pattern匹配的内容
输入?pattern : 向上寻找和pattern匹配的内容
n/N ：向前/向后继续寻找
g ：调到第一行
G : 跳到最后一行
输入数字再加字母g ：跳转到对应的行
输入!<commond> ：执行shell命令

配置分页器自动换行
git config --global core.pager 'less -+$LESS -FRX'

配置别名
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
--global只在本用户的全局配置中添加Git命令别名，--system能够被所有用户使用

别名可以包含命令参数
git config --global alias.ci "commit -s"

在Git命令输出中开启颜色显示
git config --global color.ui true

编辑配置文件
版本库级
git config -e
全局
git config -e --global
系统级
git config -e --system
优先级：版本库>全局>系统级

用git config操作其他的INI文件
GIT_CONFIG=test.ini git config a.b.c.d "hello, world"
GIT_CONFIG=test.ini git config a.b.c.d

删除配置中的设置
git config --unset --global <section>.<key>

#显示包括隐藏目录在内的所有目录
ls -aF

搜索工作区的文件内容
git grep "工作区文件内容搜索"

显示版本库.git的位置
git rev-parse --git-dir
显示工作区根目录
git rev-parse --show-toplevel
相对于工作区根目录的相对目录
git rev-parse --show-prefix


 git rm --cached <file>
 直接从暂存区删除文件，工作区则不作出改变




 清除当前工作区没有加入版本库的文件和目录(非跟踪文件和目录)
 git clean -fd

将所有修改过的文件加入暂存
git add -u
将本地删除文件和新增文件都登记到提交暂存区
git add -A
对一个文件内的修改进行有选择性的增加
git add -p
将本地有改动（包括修改和删除）的文件标记到暂存区
git add -u
将工作区所有改动及新增文件添加到暂存区
git add -A
交互模式
git add -i
强制添加
git add -f

查看提交日志
精简显示
git log --pretty=oneline -s
查看提交日志的文件变更统计
git log --stat
显示更短小的分支
git log --oneline(Git1.6.3及以后版本才有)
git log --pretty=oneline --abbrev-commit(旧版本)
分支表示
git log --graph
显示最近的几条日志
git log -<n>
显示每次提交的具体改动
git log -p
定制输出
git log --pretty==[raw/fuller/oneline]
查看文件状态
精简状态输出
git status -s
在状态显示中看到被忽略的文件
git status --ignored

查看差异
比较里程碑B和里程碑A
git diff B A
比较工作区和里程碑A
git diff A
比较暂存区和里程碑A
git diff --cached A
工作区与提交暂存区比较
git diff
暂存区和HEAD比较
git diff --cached
工作区与HEAD比较
git diff HEAD
文件不同版本的差异比较
git diff <commit1> <commit2> -- <paths>
非Git目录/文件的差异比较
git diff <path1> <path2>
逐词比较
git diff --word-diff

不重置引用，不改变工作区(包含路径<paths>的用法)
git reset [-q] [<commit>] [--] <paths>...
用指定提交状态(<commit>)下的文件(<paths>)替换掉暂存区中的文件

重置引用(不使用路径<paths>的用法)
git reset [--soft | --mixed | --hard | --merge | --keep] [-q] [<commit>]

git reset --hard
替换引用的指向。引用指向新的提交ID
替换暂存区。替换后，暂存区的内容和引用指向的目录树一致
替换工作区。替换后，工作区的内容变得和暂存区一致，也和HEAD所指向的目录树内容相同

git reset --soft
只更改引用的指向，不改变暂存区和工作区。

git reset --mixed(默认)/git reset <commit>
更改引用的指向。
重置暂存区。
不改变工作区。

检出(包含了路径<paths>)
git checkout [-q] [<commit>] [--] <paths>...
不会改变HEAD头指针，主要用于指定版本的文件覆盖工作区中对应的文件。
如果省略<commit>，则会用暂存区的文件覆盖工作区的文件。

检出(不适用路径<paths>)
git checkout [<branch>]
会改变HEAD头指针。
如果省略<branch>则相当于对工作区进行状态检查

创建和切换到新的分支
git checkout [-m] [[-b]--orphan] <new_branch> [<start_point>]
新的分支从<start_point>指定的提交开始创建。

汇总显示工作区、暂存区和HEAD的差异
git checkout

维持HEAD的指向不变。用branch所指向的提交中的filename替换暂存区和工作区中相应的文件
git checkout branch -- filename

用暂存区全部的文件或指定的文件替换工作区的文件
git checkout ./git checkout -- <file>
用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件
git checkout HEAD ./git checkout HEAD <file>

查看暂存区(版本库)中的文件
git ls-files
查看历史版本的文件列表
git ls-files --with-tree=HEAD^

移动文件
改名
git mv welcome.txt README
 

修改最新的提交（提交内容，提交注释）
git commit --amend
用于对最新的提交进行重新提交以修补错误的提交说明或错误的提交文件
git reset --soft HEAD^
git commit -e -F .git/COMMIT_EDITMSG
直接在工作区删除，对暂存区和版本库没有任何影响
删除文件
git rm
git commit
删除最新提交中不该提交的文件
git rm --cached <file>
重用提交说明
git commit -C commitId
生成空提交
git commit --allow-empty -m

恢复删除的文件恢复到本地
git checkout HEAD~1 -- filename

移动文件（改名）
git mv <file1> <file2>

文件.gitignore的作用范围是其所处的目录及其子目录

文件归档，对任意提交对应的目录树建立归档
git archive
基于最新提交建立归档文件latest.zip
git archive -o latest.zip HEAD
只将目录src和doc建立到归档partial.tar中
git archive -o partial.tar HEAD src doc
基于里程碑v1.0建立归档，并且为归档中的文件添加目录前缀1.0
git archive --format=tar --prefix=1.0/ v1.0 | gzip > foo-1.0.tar.gz


一个提交Id实际上就可以代表一个版本列表，含义是该版本开始的所有历史提交
git rev-list --oneline B
两个或多个版本，相当于每个版本单独使用时指代的列表的并集
git rev-list --oneline B C
在一个版本前面加上符号（^）含义是取反，即排除这个版本及其历史版本
git rev-list --oneline ^B C
点点表示法,前后的版本顺序很重要（作用同取反）
git rev-list --oneline B..C
三点表示法的含义是两个版本共同能访问到的除外
git rev-list --oneline B...C
某提交的历史提交，自身除外，用语法r1^@
git rev-list --oneline B^@
提交本身不包括其历史提交，用语法r1^!

挑拣指令,从众多的提交中挑选出一个提交应用在当前的工作分支中。
该指令需提供一个提交Id作为参数，相当于将该提交导出为补丁文件，然后在当前HEAD上重放，形成无论内容还是提交说明都一致的提交。
git cherry-pick commitId

对提交变基操作，可以实现将指定范围的提交“嫁接”到另外一个提交之上
git rebase --onto <newbasee> <since> <till>
交互式变基
会将<since>..<till>的提交悉数罗列在一个文件中，然后自动打开一个编辑器来编辑这个文件。
可以通过修改文件的内容设定编辑操作，实现删除提交、将多个提交压缩为一个提交、更改提交的顺序，以及更改历史提交说明等
git rebase -i --onto <newbase> <since> <till>

删除里程碑
git tag -d <name>

反向提交
重新做一次提交，相当于用错误的历史提交的反向提交，来修正错误的历史提交
git revert

版本库克隆
git clone <repository> <directory>
git clone --bare <reepository> <directory.git>
git clone --mirror <repository> <directory.git>

git push [<remote-repos> [<refspec>]]
git pull [<remote-repos> [<refspec>]]

卖主分支
就是在版本库中创建一个专门和上游代码进行同步的分支，一旦有上游代码发布就检入到卖主分支中。

