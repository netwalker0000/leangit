安装Git后的进一步设置
git config --global user.name "Your name"
git config --global user.email "email@example.com"

初始化一个Git仓库
git init


添加文件到Git仓库
git add <file>
git commit

掌握工作区状态
git status

查看修改内容
git diff
git diff HEAD -- <file.name> 查看工作区和版本库里面最新版本的区别

查看提交历史
git log --pretty=oneline

查看命令历史
git relog

回退版本(前提是没有推送到远程库)
git reset --hard commit_id
Git在内部有个指向当前版本的HEAD指针，当回退版本时，Git仅仅改变HEAD的指向，然后顺便把工作区的文件更新。

HEAD指向的版本就是当前版本
上一个版本是HEAD^
上上一个版本HEAD^^
往上100个版本HEAD~100

工作区 文件目录
版本库 .git
暂存区 .git/stage
分支   .git/master
HEAD   指向master的指针
git add 把文件修改添加到暂存区
git commit 把暂存区的所有内容提交到当前分支

Git管理的是修改，而不是文件

丢弃工作区的修改
git checkout -- <file>
让文件回到最近一次git commit或git add时的状态

撤销暂存区的修改,重新放回工作区
git reset HEAD <file>

从版本库中删除文件
git rm <file>
git commit

远程仓库
第一步，创建SSH Key
ssh-keygen -t rsa "youremail@example.com"
用户主目录里找.ssh目录。id_rsa是私钥，id_rsa.pub是公钥
第二步，登录GitHub，打开“Account settings”，“SSH Keys”页面，点击“Add SSH Key”，填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容

关联远程仓库
在Github上创建新仓库
git remote add origin git@github.com:<account>/<projiectname>.git
git push -u origin master(首次推送)
git push (第二次推送)

从远程库克隆
git clone git@github.com:<account>/<projectname>.git

master是主分支，当创建新的分支时，Git新建一个指针指向它，再把HEAD指向新分支，就表示当前分支在新分支上。

创建新分支
git branch <name>

切换分支
git checkout <name>

创建新分支并切换
git checkout -b <name>

查看当前分支
git branch

将分支合并到master上
git merge <name>

删除分支
git branch -d <name>

查看分支合并图
git log --graph

通常，合并分支时，如果可能，Git会用Fast forward模式。但这种模式下，删除分支后，会丢到分支信息。
如果禁用Fast forward模式，Git就会在merge时生成一个新的commit。这样，就可以看到分支信息。

git merge --no-ff -m <content> <name>

Bug分支
git stash
把当前工作现场“储藏”起来，等以后恢复现场后继续工作。

查看工作现场
git stash list

恢复工作现场
方法一:
git stash apply(恢复，stash内容并不删除)
git stash drop(删除stash)
方法二：
git stash pop(恢复的同时删除stash)

可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash

丢弃一个没有合并过得分支
git branch -D <name>

远程仓库的默认名字是origin

查看远程库的信息
git remote
git remote -v

推送分支
git push origin <name>
把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支。这样，Git就会把该分支推送到远程库对应的远程分支上。、

分支推送策略
master分支时主分支，因此要时刻与远程库同步
dev分支是开发分支，团队所有成员都需要在上面工作，所有也需要与远程同步
bug分支只用于在本地修复bug，就没必要推送到远程。
feature分支是否推送到远程，取决于是否在上面合作开发。

创建本地分支和远程分支的链接关系
git branch --set-upstream <branchname> origin/<branchname>

在本地创建和远程分支对应的分支
git checkout -b <branchname> origin/<branchname>
本地和远程分支的名称最好一致

多人协作的工作模式
首先，可以试图用git push origin <branchname>推送自己的修改
如果推送失败，则因为远程分支比本地的更新，需要先用git pull试图合并
如果合并有冲突，则解决冲突，并在本地提交
没有冲突或解决掉冲突后，再用git push origin <branchname>推送

Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。

打标签
首先，切换到需要打标签的分支上。
然后，使用git tag <name>就可以打一个新标签

查看所有标签
git tag

默认标签是打在最新提交的commit上的。

补标签
首先，找到历史提交的commitId
然后，使用git tag <name> commitId打上标签

注意，标签不是按时间列出，而是按字母排序的

查看标签信息
git show <tagname>

创建带说明的标签
git tag -a <name> -m <content> commitId

删除标签
git tag -d <name>

因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

推送标签到远程
git push origin <name>

一次性推送全部尚未推送到远程的本地标签
git push origin --tags

删除推送到远程的标签
首先，先从本地删除git tag -d <name>
然后，从远程删除
git push origin :refs/tags/<name>

参与开源项目
首先，访问项目主页，点击“fork”就在自己的账号下克隆一个项目仓库。
然后，从自己的账号下clone。
注意，一定要从自己的账号下clone，这样才能推送修改。
如果量修复一个bug，或者新增一个功能，立刻就可以开始干活，干完后，忘自己的仓库推送。
如果希望官方库能接受自己的修改，可以在GitHub上发起一个pull request。

让Git显示颜色
git config --global color.ui true

忽略特殊文件
在Git的工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以用了。
作用配置文件可以直接在线浏览https://github.com/github/gitignore

忽略文件的准则：
忽略操作系统自动生成的文件，比如缩略图等。
忽略编译生成的中间文件、可执行文件等。也就是如果一个文件通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译生成的.class文件
忽略自己的带有敏感信息的配置文件，比如存放口令的配置文件。

强制添加文件到Git
git add -f <file>

检查.gitignore的规则
git check-ignore -v <file>

配置别名
git config --global alias st status
git config --global alias co checkout
git config --global alias ci commit
git config --global alias br branch
git config --global alias unstage 'reset HEAD'
git config --global alias last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

配置Git时，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

每个仓库的Git配置文件都放在.git/config文件中
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中